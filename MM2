local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))()

local Window = OrionLib:MakeWindow({ 
    Name = "Riq Hub - " .. identifyexecutor(), 
    HidePremium = false, 
    SaveConfig = true, 
    ConfigFolder = "RiqHubConfig" 
})

local TabToggles = Window:MakeTab({
    Name = "Toggles",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local Tab = Window:MakeTab({
    Name = "ESP",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local TabAutoShoot = Window:MakeTab({
    Name = "Auto Shoot",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local murderESPEnabled = false
local sheriffESPEnabled = false
local playerESPEnabled = false
local autoShootEnabled = false
local shootOffset = 2.8

local runService = game:GetService("RunService")
local lastUpdate = tick()
local updateInterval = 1
local Players = game:GetService("Players")
local LP = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local murderHighlights = {}
local sheriffHighlights = {}
local playerHighlights = {}

local function applyHighlight(character, color, highlightTable)
    if highlightTable[character] then
        return
    end

    local highlight = Instance.new("Highlight")
    highlight.FillTransparency = 1
    highlight.OutlineColor = color
    highlight.Parent = character
    highlightTable[character] = highlight
end

local function removeHighlights(highlightTable)
    for character, highlight in pairs(highlightTable) do
        highlight:Destroy()
        highlightTable[character] = nil
    end
end

local function updateMurderESP()
    if not murderESPEnabled then
        removeHighlights(murderHighlights)
        return
    end

    local existingMurderHighlights = {}
    for _, model in pairs(Workspace:GetChildren()) do
        if model:IsA("Model") then
            local player = Players:GetPlayerFromCharacter(model)
            if player then
                local backpack = player.Backpack
                if backpack then
                    local knife = backpack:FindFirstChild("Knife")
                    if knife or player.Character:FindFirstChild("Knife") then
                        existingMurderHighlights[player.Character] = true
                        applyHighlight(player.Character, Color3.new(1, 0, 0), murderHighlights)
                    end
                end
            end
        end
    end
    
    for character, _ in pairs(murderHighlights) do
        if not existingMurderHighlights[character] then
            murderHighlights[character]:Destroy()
            murderHighlights[character] = nil
        end
    end
end

local function updateSheriffESP()
    if not sheriffESPEnabled then
        removeHighlights(sheriffHighlights)
        return
    end

    local existingSheriffHighlights = {}
    for _, model in pairs(Workspace:GetChildren()) do
        if model:IsA("Model") then
            local player = Players:GetPlayerFromCharacter(model)
            if player then
                local backpack = player.Backpack
                if backpack then
                    local gun = backpack:FindFirstChild("Gun")
                    if gun or player.Character:FindFirstChild("Gun") then
                        existingSheriffHighlights[player.Character] = true
                        applyHighlight(player.Character, Color3.new(0, 0, 1), sheriffHighlights)
                    end
                end
            end
        end
    end
    
    for character, _ in pairs(sheriffHighlights) do
        if not existingSheriffHighlights[character] then
            sheriffHighlights[character]:Destroy()
            sheriffHighlights[character] = nil
        end
    end
end

local function updatePlayerESP()
    if not playerESPEnabled then
        removeHighlights(playerHighlights)
        return
    end

    local existingPlayerHighlights = {}
    for _, model in pairs(Workspace:GetChildren()) do
        if model:IsA("Model") then
            local player = Players:GetPlayerFromCharacter(model)
            if player and not murderHighlights[player.Character] and not sheriffHighlights[player.Character] then
                existingPlayerHighlights[player.Character] = true
                applyHighlight(player.Character, Color3.new(0, 1, 0), playerHighlights)
            end
        end
    end
    
    for character, _ in pairs(playerHighlights) do
        if not existingPlayerHighlights[character] then
            playerHighlights[character]:Destroy()
            playerHighlights[character] = nil
        end
    end
end

local function notify(title, text, time)
    OrionLib:MakeNotification({
        Name = title,
        Content = text,
        Image = "rbxassetid://4483345998",
        Time = time
    })
end

	local function findMurderer()
	
	
		-- Fallback
		for _, i in ipairs(game.Players:GetPlayers()) do
			if i.Backpack:FindFirstChild("Knife") then
				return i
			end
		end
	
		for _, i in ipairs(game.Players:GetPlayers()) do
			if not i.Character then continue end
			if i.Character:FindFirstChild("Knife") then
				return i
			end
		end
	
		if playerData then
			for player, data in playerData do
				if data.Role == "Murderer" then
					if game.Players:FindFirstChild(player) then
						return game.Players:FindFirstChild(player)
					end
				end
			end
		end
		return nil
	end
	
	local function findSheriff()
	
	
		-- Fallback
		for _, i in ipairs(game.Players:GetPlayers()) do
			if i.Backpack:FindFirstChild("Gun") then
				return i
			end
		end
	
		for _, i in ipairs(game.Players:GetPlayers()) do
			if not i.Character then continue end
			if i.Character:FindFirstChild("Gun") then
				return i
			end
		end
	
	
		if playerData then
			for player, data in playerData do
				if data.Role == "Sheriff" then
					if game.Players:FindFirstChild(player) then
						return game.Players:FindFirstChild(player)
					end
				end
			end
		end
		return nil
	end

local function getPredictedPosition(player, shootOffset)
    pcall(function()
        player = player.Character
        if not player then notify("No murderer to predict position.") return end
    end)
    local playerHRP = player:FindFirstChild("UpperTorso")
    local playerHum = player:FindFirstChild("Humanoid")
    if not playerHRP or not playerHum then
        return Vector3.new(0,0,0), "Could not find the player's HumanoidRootPart."
    end

    local playerPosition = playerHRP.Position
    local velocity = playerHRP.AssemblyLinearVelocity
    local playerMoveDirection = playerHum.MoveDirection
    local predictedPosition = playerHRP.Position + (velocity * Vector3.new(0, 0.5, 0)) * (shootOffset / 15) + playerMoveDirection * shootOffset

    return predictedPosition
end

local function performAutoShoot()
    if not autoShootEnabled then
        return
    end

    local foundSheriff = findSheriff()
    local foundMurderer = findMurderer()

    if foundSheriff == LP then
        if not foundMurderer then
            return
        end

        local murdererPosition = foundMurderer.Character.HumanoidRootPart.Position
        local characterRootPart = LP.Character.HumanoidRootPart
        local rayDirection = murdererPosition - characterRootPart.Position

        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Exclude
        raycastParams.FilterDescendantsInstances = {LP.Character}

        local hit = workspace:Raycast(characterRootPart.Position, rayDirection, raycastParams)
        if not hit or hit.Instance.Parent == foundMurderer.Character then
            if not LP.Character:FindFirstChild("Gun") then
                local gun = LP.Backpack:FindFirstChild("Gun")
                if gun then
                    LP.Character:FindFirstChild("Humanoid"):EquipTool(gun)
                else
                    notify("You don't have the gun.")
                    return
                end
            end

            local predictedPosition = getPredictedPosition(foundMurderer, shootOffset)

            local args = {
                [1] = 1,
                [2] = predictedPosition,
                [3] = "AH2"
            }

            LP.Character.Gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(unpack(args))
        end
    end
end

Tab:AddToggle({
    Name = "Murder ESP",
    Default = false,
    Callback = function(Value)
        murderESPEnabled = Value
    end
})

Tab:AddToggle({
    Name = "Sheriff ESP",
    Default = false,
    Callback = function(Value)
        sheriffESPEnabled = Value
    end
})

Tab:AddToggle({
    Name = "Player ESP",
    Default = false,
    Callback = function(Value)
        playerESPEnabled = Value
    end
})

TabAutoShoot:AddToggle({
    Name = "Auto Shoot",
    Default = false,
    Callback = function(Value)
        autoShootEnabled = Value
    end
})

runService.Heartbeat:Connect(function()
    if tick() - lastUpdate >= updateInterval then
        if murderESPEnabled then updateMurderESP() end
        if sheriffESPEnabled then updateSheriffESP() end
        if playerESPEnabled then updatePlayerESP() end
        if autoShootEnabled then findMurderer() findSheriff() end
        lastUpdate = tick()
    end

    if autoShootEnabled then
        performAutoShoot()
    end
end)

ReplicatedStorage.Remotes.Gameplay.RoundStart.OnClientEvent:Connect(function()
    notify("New Round", "Variables reset for new round", 3)
    if autoShootEnabled then
        performAutoShoot()
        wait(2)
    end
end)
