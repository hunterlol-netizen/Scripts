local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))()

local Window = OrionLib:MakeWindow({ 
    Name = "Riq Hub - " .. identifyexecutor(), 
    HidePremium = false, 
    SaveConfig = true, 
    ConfigFolder = "RiqHubConfig" 
})

local TabToggles = Window:MakeTab({
    Name = "Toggles",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local Tab = Window:MakeTab({
    Name = "ESP",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local murderESPEnabled = false
local sheriffESPEnabled = false
local playerESPEnabled = false
local autoShootingEnabled = false

local runService = game:GetService("RunService")
local lastUpdate = tick()
local updateInterval = 1
local Players = game:GetService("Players")
local LP = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local shootOffset = 2.8

local murderHighlights = {}
local sheriffHighlights = {}
local playerHighlights = {}

local function applyHighlight(character, color, highlightTable)
    if highlightTable[character] then
        return
    end

    local highlight = Instance.new("Highlight")
    highlight.FillTransparency = 1
    highlight.OutlineColor = color
    highlight.Parent = character
    highlightTable[character] = highlight
end

local function removeHighlights(highlightTable)
    for character, highlight in pairs(highlightTable) do
        highlight:Destroy()
        highlightTable[character] = nil
    end
end

local function updateMurderESP()
    local existingMurderHighlights = {}
    for _, model in pairs(Workspace:GetChildren()) do
        if model:IsA("Model") then
            local player = Players:GetPlayerFromCharacter(model)
            if player then
                local backpack = player.Backpack
                if backpack then
                    local knife = backpack:FindFirstChild("Knife")
                    if knife or player.Character:FindFirstChild("Knife") then
                        existingMurderHighlights[player.Character] = true
                        applyHighlight(player.Character, Color3.new(1, 0, 0), murderHighlights)
                    end
                end
            end
        end
    end
    
    for character, _ in pairs(murderHighlights) do
        if not existingMurderHighlights[character] then
            murderHighlights[character]:Destroy()
            murderHighlights[character] = nil
        end
    end
end

local function updateSheriffESP()
    local existingSheriffHighlights = {}
    for _, model in pairs(Workspace:GetChildren()) do
        if model:IsA("Model") then
            local player = Players:GetPlayerFromCharacter(model)
            if player then
                local backpack = player.Backpack
                if backpack then
                    local gun = backpack:FindFirstChild("Gun")
                    if gun or player.Character:FindFirstChild("Gun") then
                        existingSheriffHighlights[player.Character] = true
                        applyHighlight(player.Character, Color3.new(0, 0, 1), sheriffHighlights)
                    end
                end
            end
        end
    end
    
    for character, _ in pairs(sheriffHighlights) do
        if not existingSheriffHighlights[character] then
            sheriffHighlights[character]:Destroy()
            sheriffHighlights[character] = nil
        end
    end
end

local function updatePlayerESP()
    local existingPlayerHighlights = {}
    for _, model in pairs(Workspace:GetChildren()) do
        if model:IsA("Model") then
            local player = Players:GetPlayerFromCharacter(model)
            if player and not murderHighlights[player.Character] and not sheriffHighlights[player.Character] then
                existingPlayerHighlights[player.Character] = true
                applyHighlight(player.Character, Color3.new(0, 1, 0), playerHighlights)
            end
        end
    end
    
    for character, _ in pairs(playerHighlights) do
        if not existingPlayerHighlights[character] then
            playerHighlights[character]:Destroy()
            playerHighlights[character] = nil
        end
    end
end

local function notify(title, text, time)
    OrionLib:MakeNotification({
        Name = title,
        Content = text,
        Image = "rbxassetid://4483345998",
        Time = time
    })
end

local function findMurderer()
    for _, player in pairs(Players:GetPlayers()) do
        local character = player.Character
        if character and character:FindFirstChild("Humanoid") then
            local backpack = player.Backpack
            if backpack and backpack:FindFirstChild("Knife") then
                return player
            end
        end
    end
    return nil
end

local function findSheriff()
    for _, player in pairs(Players:GetPlayers()) do
        local character = player.Character
        if character and character:FindFirstChild("Humanoid") then
            local backpack = player.Backpack
            if backpack and backpack:FindFirstChild("Gun") then
                return player
            end
        end
    end
    return nil
end

local function getPredictedPosition(player, shootOffset)
    pcall(function()
        player = player.Character
        if not player then notify("No murderer to predict position.") return end
    end)
    local playerHRP = player:FindFirstChild("UpperTorso")
    local playerHum = player:FindFirstChild("Humanoid")
    if not playerHRP or not playerHum then
        return Vector3.new(0,0,0), "Could not find the player's HumanoidRootPart."
    end

    local playerPosition = playerHRP.Position
    local velocity = playerHRP.AssemblyLinearVelocity
    local playerMoveDirection = playerHum.MoveDirection
    local predictedPosition = playerHRP.Position + (velocity * Vector3.new(0, 0.5, 0)) * (shootOffset / 15) + playerMoveDirection * shootOffset

    return predictedPosition
end

local function startAutoShoot()
    task.spawn(function()
        while task.wait(1) do
            if findSheriff() == LP and autoShootingEnabled then
                notify("Auto-shooting started.")
                repeat
                    task.wait(0.1)
                    local murderer = findMurderer()
                    if not murderer then notify("No murderer.") continue end
                    local murdererPosition = murderer.Character.HumanoidRootPart.Position
                    local characterRootPart = LP.Character.HumanoidRootPart
                    local rayDirection = murdererPosition - characterRootPart.Position

                    local raycastParams = RaycastParams.new()
                    raycastParams.FilterType = Enum.RaycastFilterType.Exclude
                    raycastParams.FilterDescendantsInstances = {LP.Character}

                    local hit = Workspace:Raycast(characterRootPart.Position, rayDirection, raycastParams)
                    if not hit or hit.Instance.Parent == murderer.Character then
                        notify("Auto-shooting!")
                        if not LP.Character:FindFirstChild("Gun") then
                            if LP.Backpack:FindFirstChild("Gun") then
                                LP.Character:FindFirstChild("Humanoid"):EquipTool(LP.Backpack:FindFirstChild("Gun"))
                            else
                                notify("You don't have the gun..?")
                                return
                            end
                        end

                        local predictedPosition = getPredictedPosition(murderer, shootOffset)

                        local args = {
                            [1] = 1,
                            [2] = predictedPosition,
                            [3] = "AH2"
                        }

                        LP.Character.Gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(unpack(args))
                    end
                until findSheriff() ~= LP or not autoShootingEnabled
            end
        end
    end)
end

local function updateAutoShoot()
    if autoShootingEnabled then
        startAutoShoot()
    end
end

Tab:AddToggle({
    Name = "Murder ESP",
    Default = false,
    Callback = function(Value)
        murderESPEnabled = Value
        updateESP()
    end
})

Tab:AddToggle({
    Name = "Sheriff ESP",
    Default = false,
    Callback = function(Value)
        sheriffESPEnabled = Value
        updateESP()
    end
})

Tab:AddToggle({
    Name = "Player ESP",
    Default = false,
    Callback = function(Value)
        playerESPEnabled = Value
        updateESP()
    end
})

TabToggles:AddToggle({
    Name = "Auto Shoot",
    Default = false,
    Callback = function(Value)
        autoShootingEnabled = Value
        updateAutoShoot()
    end
})

runService.Heartbeat:Connect(function()
    if tick() - lastUpdate >= updateInterval then
        updateESP()
        lastUpdate = tick()
    end
end)

ReplicatedStorage.Remotes.Gameplay.RoundStart.OnClientEvent:Connect(function()
    notify("New Round", "Variables reset for new round", 3)
    updateAutoShoot()
end)
